// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"github.com/ChimeraCoder/anaconda"
	"net/url"
	"sync"
)

// Ensure, that TwitterAPIMock does implement TwitterAPI.
// If this is not the case, regenerate this file with moq.
var _ TwitterAPI = &TwitterAPIMock{}

// TwitterAPIMock is a mock implementation of TwitterAPI.
//
// 	func TestSomethingThatUsesTwitterAPI(t *testing.T) {
//
// 		// make and configure a mocked TwitterAPI
// 		mockedTwitterAPI := &TwitterAPIMock{
// 			DeleteTweetFunc: func(id int64, trimUser bool) (anaconda.Tweet, error) {
// 				panic("mock out the DeleteTweet method")
// 			},
// 			GetFavoritesFunc: func(v url.Values) ([]anaconda.Tweet, error) {
// 				panic("mock out the GetFavorites method")
// 			},
// 			GetSelfFunc: func(v url.Values) (anaconda.User, error) {
// 				panic("mock out the GetSelf method")
// 			},
// 			GetUserTimelineFunc: func(v url.Values) ([]anaconda.Tweet, error) {
// 				panic("mock out the GetUserTimeline method")
// 			},
// 			UnRetweetFunc: func(id int64, trimUser bool) (anaconda.Tweet, error) {
// 				panic("mock out the UnRetweet method")
// 			},
// 			UnfavoriteFunc: func(id int64) (anaconda.Tweet, error) {
// 				panic("mock out the Unfavorite method")
// 			},
// 		}
//
// 		// use mockedTwitterAPI in code that requires TwitterAPI
// 		// and then make assertions.
//
// 	}
type TwitterAPIMock struct {
	// DeleteTweetFunc mocks the DeleteTweet method.
	DeleteTweetFunc func(id int64, trimUser bool) (anaconda.Tweet, error)

	// GetFavoritesFunc mocks the GetFavorites method.
	GetFavoritesFunc func(v url.Values) ([]anaconda.Tweet, error)

	// GetSelfFunc mocks the GetSelf method.
	GetSelfFunc func(v url.Values) (anaconda.User, error)

	// GetUserTimelineFunc mocks the GetUserTimeline method.
	GetUserTimelineFunc func(v url.Values) ([]anaconda.Tweet, error)

	// UnRetweetFunc mocks the UnRetweet method.
	UnRetweetFunc func(id int64, trimUser bool) (anaconda.Tweet, error)

	// UnfavoriteFunc mocks the Unfavorite method.
	UnfavoriteFunc func(id int64) (anaconda.Tweet, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteTweet holds details about calls to the DeleteTweet method.
		DeleteTweet []struct {
			// ID is the id argument value.
			ID int64
			// TrimUser is the trimUser argument value.
			TrimUser bool
		}
		// GetFavorites holds details about calls to the GetFavorites method.
		GetFavorites []struct {
			// V is the v argument value.
			V url.Values
		}
		// GetSelf holds details about calls to the GetSelf method.
		GetSelf []struct {
			// V is the v argument value.
			V url.Values
		}
		// GetUserTimeline holds details about calls to the GetUserTimeline method.
		GetUserTimeline []struct {
			// V is the v argument value.
			V url.Values
		}
		// UnRetweet holds details about calls to the UnRetweet method.
		UnRetweet []struct {
			// ID is the id argument value.
			ID int64
			// TrimUser is the trimUser argument value.
			TrimUser bool
		}
		// Unfavorite holds details about calls to the Unfavorite method.
		Unfavorite []struct {
			// ID is the id argument value.
			ID int64
		}
	}
	lockDeleteTweet     sync.RWMutex
	lockGetFavorites    sync.RWMutex
	lockGetSelf         sync.RWMutex
	lockGetUserTimeline sync.RWMutex
	lockUnRetweet       sync.RWMutex
	lockUnfavorite      sync.RWMutex
}

// DeleteTweet calls DeleteTweetFunc.
func (mock *TwitterAPIMock) DeleteTweet(id int64, trimUser bool) (anaconda.Tweet, error) {
	if mock.DeleteTweetFunc == nil {
		panic("TwitterAPIMock.DeleteTweetFunc: method is nil but TwitterAPI.DeleteTweet was just called")
	}
	callInfo := struct {
		ID       int64
		TrimUser bool
	}{
		ID:       id,
		TrimUser: trimUser,
	}
	mock.lockDeleteTweet.Lock()
	mock.calls.DeleteTweet = append(mock.calls.DeleteTweet, callInfo)
	mock.lockDeleteTweet.Unlock()
	return mock.DeleteTweetFunc(id, trimUser)
}

// DeleteTweetCalls gets all the calls that were made to DeleteTweet.
// Check the length with:
//     len(mockedTwitterAPI.DeleteTweetCalls())
func (mock *TwitterAPIMock) DeleteTweetCalls() []struct {
	ID       int64
	TrimUser bool
} {
	var calls []struct {
		ID       int64
		TrimUser bool
	}
	mock.lockDeleteTweet.RLock()
	calls = mock.calls.DeleteTweet
	mock.lockDeleteTweet.RUnlock()
	return calls
}

// GetFavorites calls GetFavoritesFunc.
func (mock *TwitterAPIMock) GetFavorites(v url.Values) ([]anaconda.Tweet, error) {
	if mock.GetFavoritesFunc == nil {
		panic("TwitterAPIMock.GetFavoritesFunc: method is nil but TwitterAPI.GetFavorites was just called")
	}
	callInfo := struct {
		V url.Values
	}{
		V: v,
	}
	mock.lockGetFavorites.Lock()
	mock.calls.GetFavorites = append(mock.calls.GetFavorites, callInfo)
	mock.lockGetFavorites.Unlock()
	return mock.GetFavoritesFunc(v)
}

// GetFavoritesCalls gets all the calls that were made to GetFavorites.
// Check the length with:
//     len(mockedTwitterAPI.GetFavoritesCalls())
func (mock *TwitterAPIMock) GetFavoritesCalls() []struct {
	V url.Values
} {
	var calls []struct {
		V url.Values
	}
	mock.lockGetFavorites.RLock()
	calls = mock.calls.GetFavorites
	mock.lockGetFavorites.RUnlock()
	return calls
}

// GetSelf calls GetSelfFunc.
func (mock *TwitterAPIMock) GetSelf(v url.Values) (anaconda.User, error) {
	if mock.GetSelfFunc == nil {
		panic("TwitterAPIMock.GetSelfFunc: method is nil but TwitterAPI.GetSelf was just called")
	}
	callInfo := struct {
		V url.Values
	}{
		V: v,
	}
	mock.lockGetSelf.Lock()
	mock.calls.GetSelf = append(mock.calls.GetSelf, callInfo)
	mock.lockGetSelf.Unlock()
	return mock.GetSelfFunc(v)
}

// GetSelfCalls gets all the calls that were made to GetSelf.
// Check the length with:
//     len(mockedTwitterAPI.GetSelfCalls())
func (mock *TwitterAPIMock) GetSelfCalls() []struct {
	V url.Values
} {
	var calls []struct {
		V url.Values
	}
	mock.lockGetSelf.RLock()
	calls = mock.calls.GetSelf
	mock.lockGetSelf.RUnlock()
	return calls
}

// GetUserTimeline calls GetUserTimelineFunc.
func (mock *TwitterAPIMock) GetUserTimeline(v url.Values) ([]anaconda.Tweet, error) {
	if mock.GetUserTimelineFunc == nil {
		panic("TwitterAPIMock.GetUserTimelineFunc: method is nil but TwitterAPI.GetUserTimeline was just called")
	}
	callInfo := struct {
		V url.Values
	}{
		V: v,
	}
	mock.lockGetUserTimeline.Lock()
	mock.calls.GetUserTimeline = append(mock.calls.GetUserTimeline, callInfo)
	mock.lockGetUserTimeline.Unlock()
	return mock.GetUserTimelineFunc(v)
}

// GetUserTimelineCalls gets all the calls that were made to GetUserTimeline.
// Check the length with:
//     len(mockedTwitterAPI.GetUserTimelineCalls())
func (mock *TwitterAPIMock) GetUserTimelineCalls() []struct {
	V url.Values
} {
	var calls []struct {
		V url.Values
	}
	mock.lockGetUserTimeline.RLock()
	calls = mock.calls.GetUserTimeline
	mock.lockGetUserTimeline.RUnlock()
	return calls
}

// UnRetweet calls UnRetweetFunc.
func (mock *TwitterAPIMock) UnRetweet(id int64, trimUser bool) (anaconda.Tweet, error) {
	if mock.UnRetweetFunc == nil {
		panic("TwitterAPIMock.UnRetweetFunc: method is nil but TwitterAPI.UnRetweet was just called")
	}
	callInfo := struct {
		ID       int64
		TrimUser bool
	}{
		ID:       id,
		TrimUser: trimUser,
	}
	mock.lockUnRetweet.Lock()
	mock.calls.UnRetweet = append(mock.calls.UnRetweet, callInfo)
	mock.lockUnRetweet.Unlock()
	return mock.UnRetweetFunc(id, trimUser)
}

// UnRetweetCalls gets all the calls that were made to UnRetweet.
// Check the length with:
//     len(mockedTwitterAPI.UnRetweetCalls())
func (mock *TwitterAPIMock) UnRetweetCalls() []struct {
	ID       int64
	TrimUser bool
} {
	var calls []struct {
		ID       int64
		TrimUser bool
	}
	mock.lockUnRetweet.RLock()
	calls = mock.calls.UnRetweet
	mock.lockUnRetweet.RUnlock()
	return calls
}

// Unfavorite calls UnfavoriteFunc.
func (mock *TwitterAPIMock) Unfavorite(id int64) (anaconda.Tweet, error) {
	if mock.UnfavoriteFunc == nil {
		panic("TwitterAPIMock.UnfavoriteFunc: method is nil but TwitterAPI.Unfavorite was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockUnfavorite.Lock()
	mock.calls.Unfavorite = append(mock.calls.Unfavorite, callInfo)
	mock.lockUnfavorite.Unlock()
	return mock.UnfavoriteFunc(id)
}

// UnfavoriteCalls gets all the calls that were made to Unfavorite.
// Check the length with:
//     len(mockedTwitterAPI.UnfavoriteCalls())
func (mock *TwitterAPIMock) UnfavoriteCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockUnfavorite.RLock()
	calls = mock.calls.Unfavorite
	mock.lockUnfavorite.RUnlock()
	return calls
}
